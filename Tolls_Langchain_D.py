# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WHm-3do3puJix9G-685M0XaClEkSg3A
"""

!pip install langchain langchain-community langchain-google-genai faiss-cpu sentence-transformers pymupdf

from google.colab import files
uploaded = files.upload()

import os
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import Tool, initialize_agent
from langchain.agents.agent_types import AgentType
from langchain.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.document_loaders import TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.chains import RetrievalQA

os.environ["GOOGLE_API_KEY"] = "Your_Key"

loader = TextLoader("space_tourism_future.txt")
docs = loader.load()

splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=100)
chunks = splitter.split_documents(docs)

embedding = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
vectorstore = FAISS.from_documents(chunks, embedding)
retriever = vectorstore.as_retriever()

retrieval_chain = RetrievalQA.from_chain_type(
    llm=ChatGoogleGenerativeAI(model="gemini-pro"),
    retriever=retriever,
    return_source_documents=False
)

retriever_tool = Tool(
    name="DocumentRetriever",
    func=retrieval_chain.run,
    description="Answers questions using the uploaded document."
)

def safe_calculator(query: str) -> str:
    try:
        result = eval(query, {"__builtins__": {}}, {})
        return str(result)
    except Exception as e:
        return f"Error: {str(e)}"

calculator_tool = Tool(
    name="SimpleCalculator",
    func=safe_calculator,
    description="Performs basic arithmetic calculations."
)

llm = ChatGoogleGenerativeAI(model="models/gemini-1.5-pro-latest", temperature=0.2)

tools = [retriever_tool, calculator_tool]

agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True
)

agent.invoke({"input": "What are the ethical concerns of space tourism? Also, what is 500 divided by 10?"})
